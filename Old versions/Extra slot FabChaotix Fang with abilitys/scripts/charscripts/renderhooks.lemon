function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	
	bool israypartner = (Mods.isModActive("Extra Slot Ray") && (System.getGlobalVariableValueByName("Ray_Partner") == 1 || System.getGlobalVariableValueByName("Ray_Partner") == 4))
	
	//competiton sprites
	if (objA0.mapping_offset == 0x3a1aee)
	{
		u8 atex = 0x40 + 5 * 0x20
		u64 key = "dataSel_slot3"
		
		if (objA0.animation.sprite == 5)
		{
			Renderer.drawCustomSprite(key, px - 4, py, atex, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		if (objA0.update_address == 0x00b656)
		{
			if (objA0.animation.sprite == 2)
			{
				if (Renderer.hasCustomSprite("dataSel_character_knuckles"))
				{
					if (!Competition_portrait_5_P1)
						Renderer.drawCustomSprite("dataSel_character_knuckles", px-1, py-20, 0, SPRITE_FLAG_PRIO, renderQueue)
					else
						Renderer.drawCustomSprite(key, px - 4, py, atex, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
				else
				{
					if (Competition_portrait_5_P1)
					{
						Renderer.drawCustomSprite(key, px - 4, py, atex, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
					else
					{
						return false
					}
				}
			}
		}
		else if (objA0.update_address == 0x00b64e)
		{
			if (objA0.animation.sprite == 2)
			{
				if (Renderer.hasCustomSprite("dataSel_character_knuckles"))
				{
					if (!Competition_portrait_5_P2)
						Renderer.drawCustomSprite("dataSel_character_knuckles", px-1, py-20, 0, SPRITE_FLAG_PRIO, renderQueue)
					else
						Renderer.drawCustomSprite(key - 4, px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
				else
				{
					if (Competition_portrait_5_P2)
					{
						Renderer.drawCustomSprite(key, px - 4, py, atex, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
					else
					{
						return false
					}
				}
			}
		}
	}
	
	// lives and continue sprites
	if (objA0.update_address == 0x00d42c)
	{
		if (objA0.animation.sprite == 5 && objA0.animation.timer == 3)
		{
	 		u64 key
			u8 atex = 0x40 + 5 * 0x20
		#if GAMEAPP >= 0x22051500
			if (Mods.isModActive("Data Select Character Sprites - MAIN"))
			{
				if (System.getGlobalVariableValueByName("MenuStyle.dataSelect") != 0)
				{
					if (System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1)
					{
						key = "dataSel_life_slot3"
					}
					else
					{
						key = "dataSel_lifeContinue_slot3"
					}
					if (Renderer.hasCustomSprite(key))
					{
						if (u8[A0 + 0x05] != 0x00 && u8[A0 + 0x08] != 0x01)
						{
							if (Mods.isModActive("Mania Style Data Select"))
							{
								Renderer.drawCustomSprite(key, px - 16, py + ((System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1) ? 24 : 8), atex, SPRITE_FLAG_PRIO, 0xffff)
							}
							else
							{
								Renderer.drawCustomSprite(key, px, py + ((System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1) ? 16 : 0), atex, SPRITE_FLAG_PRIO, 0xffff)
							}
						} 
					}
				}
			}
			else
			{
				key = "dataSel_lifeContinue_slot3"
				if (Renderer.hasCustomSprite(key))
				{
					if (u8[A0 + 0x05] != 0x00 && u8[A0 + 0x08] != 0x01)
					{
						Renderer.drawCustomSprite(key, px, py, atex, SPRITE_FLAG_PRIO, 0xffff)
					}
				}
			}
		#endif
		#if GAMEAPP <= 0x22050800
			key = "dataSel_lifeContinue_slot3"
			if (Renderer.hasCustomSprite(key))
			{
				if (u8[A0 + 0x05] != 0x00 && u8[A0 + 0x08] != 0x01)
				{
					Renderer.drawCustomSprite(key, px, py, atex, SPRITE_FLAG_PRIO, 0xffff)
				}
			}
		#endif
		}
	}
	
	// save protraits
	if (D1.u8 >= 8 && objA0.value3b != 0)
	{
		if (px >= 188 && px <= 208 && u16[0xffffb04a + 0x010] >= 0x130 && u16[0xffffb04a + 0x010] <= 0x0150)
		{
			u64 portrait = 0
			if (objA0.animation.sprite == 5 && objA0.animation.timer == 3)
			{
				if (u8[A0 + 0x23] == 0x18)
					portrait = "dataSel_savePortrait_slot3"
				else if (u8[A0 + 0x23] == 0x19)
					portrait = "dataSel_savePortrait_superslot3"
			}
			if (portrait != 0 && Renderer.hasCustomSprite(portrait))
			{
			#if GAMEAPP >= 0x22051500
				Renderer.drawCustomSprite(portrait, px - 40, py - ((Mods.isModActive("Data Select Character Sprites - MAIN") && System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0) ? 128 : 120), 0, SPRITE_FLAG_PRIO, renderQueue)
			#endif
			#if GAMEAPP <= 0x22050800
				Renderer.drawCustomSprite(portrait, px - 40, py - 120, 0, SPRITE_FLAG_PRIO, renderQueue)
				#endif
			}
		}
	}
	
	// data select sprites
	if (objA0.update_address == 0x00d30c || objA0.update_address == 0x00d42c)
	{
		if (objA0.animation.sprite == 5 && objA0.animation.timer == 3 && !Mods.isModActive("Extra Save Slots"))
		{
			u64 key = "dataSel_slot3"
			u8 atex = 0x40 + 5 * 0x20
			
			#if GAMEAPP >= 0x22051500 //mania
				if (Mods.isModActive("Data Select Character Sprites - MAIN") && Mods.isModActive("Mania Style Data Select"))
				{
					u64 key2 = stringformat("dataSel_active_slot_decoration_s3", 0)
					if (Renderer.hasCustomSprite(key) && (Renderer.hasCustomSprite(key2)))
					{
						{
							if (gameMode == 0x4c || gameMode == 0x0c)
							{
									if (objA0.update_address == 0x00d42c)
									{
										if (System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0 && Renderer.hasCustomSprite("dataSel_saveBorder_S3"))
											Renderer.drawCustomSprite("dataSel_saveBorder_S3", px, py - 133, atex, 0, renderQueue - 100)
										else if (Renderer.hasCustomSprite("dataSel_saveBorder"))
											Renderer.drawCustomSprite("dataSel_saveBorder", px - 45, py - 125, atex, 0, renderQueue - 100)
									}
									else if (objA0.update_address == 0x00d30c)
									{
										if (Renderer.hasCustomSprite("dataSel_nosaveBorder"))
											Renderer.drawCustomSprite("dataSel_nosaveBorder", px - 37, py - 61, atex, 0, renderQueue - 100)
										if (Renderer.hasCustomSprite("dataSel_saveLabel_NOSAVE"))
											Renderer.drawCustomSprite("dataSel_saveLabel_NOSAVE", px - 24, py + 24, atex, SPRITE_FLAG_PRIO, renderQueue + 1)
									}
									else if (objA0.update_address == 0x00d782)
									{
										if (Renderer.hasCustomSprite("dataSel_nosaveBorder"))
											Renderer.drawCustomSprite("dataSel_nosaveBorder", 0x3a3 - camera.foreground.x.u16, py - 77, atex, 0, renderQueue - 100)
										if (Renderer.hasCustomSprite("dataSel_saveLabel_DELETE"))
											Renderer.drawCustomSprite("dataSel_saveLabel_DELETE", 0x3b0 - camera.foreground.x.u16, py + 8, atex, SPRITE_FLAG_PRIO, renderQueue - 100)
								}
							}
						}
		
						if (objA0.update_address == 0x00d42c)
						{
							u32 saveSlotData = 0xffffe6ac
							saveSlotData += 60
							bool saveGameSlotUsed = (u8[saveSlotData] & 0x80) == 0
							if (!saveGameSlotUsed)
							{
								u64 key23 = "dataSel_savePortrait_new"
								if (!saveGameSlotUsed && Renderer.hasCustomSprite(key23))
								{
									Renderer.drawCustomSprite(key23, px - 40, py - (System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0 ? 128 : 120), atex, SPRITE_FLAG_PRIO, renderQueue)
								}
							}
						}
					}
				}
			#endif
			
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px - 2, py - ((Mods.isModActive("Mania Style Data Select")) ? 17 : 0), atex, SPRITE_FLAG_PRIO, 0xffff)
			return false
		}
	}

	if (XtraChar == 3)
	{
		if (objA0.update_address == 0x212250)
		{
			Renderer.drawCustomSprite("cork_fang", px, py, 0x00, flags, renderQueue)
			return true
		}
		
		if (objA0.update_address == 0x212260)
		{
			u64 key = stringformat("dust_%d", objA0.value2f)
			if (Renderer.hasCustomSprite(key))
			{
				Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)
				return true
			}
		}
		
		if (objA0.update_address == 0x0837b2 && XtraChar == 3) //SIGNPOST
		{
			if (objA0.animation.sprite == 0x02)
			{
				u8 atex = 0x40 + 0x20 * getMainCharacter()
				u64 key = "goal_fang"
				//if ((global.zone_act == 0x0100) || (global.zone_act == 0x0101))
					//key = "goal_fang_UW"
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
		}
		
		if (objA0.update_address == 0x02dd98 && XtraChar == 3)
		{
			if (objA0.animation.sprite >= 0x13 && objA0.animation.sprite <= 0x16 && XtraChar == 3)
			{
				u8 atex = 0x40 + 0x20 * getMainCharacter()
				s16 px2 = px + 0x55
				Renderer.drawCustomSprite("fang_text", px2, py + 0x8, atex, 0x40, renderQueue)
				return true
			}
		}
		
		if (gameMode == 0x48 || gameMode == 0x0c && XtraChar == 3)	// Blue Spheres results + fade to main game afterwards
		{
			// Blue Spheres results texts
			if ((objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02dd98))
			{
				if (objA0.animation.sprite == 0x13 || objA0.animation.sprite == 0x16)
				{
					Renderer.drawCustomSprite("fang_text", px + ((objA0.animation.sprite == 0x13) ? 0x19 : 0x35), py + 0x8, 0x40, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
			}
		}
		
		if (gameMode == 0x34 || gameMode == 0x48 || gameMode == 0x2c || gameMode == 0x30 || global.game_mode == 0x85 || global.game_mode == 0x87) && ((XtraChar == 3)) //Just check for Fang, thanks!
		{
			if (blueSphereEXS)
			{
				if (char.animation.sprite >= 0xb1 && char.animation.sprite <= 0xb4 && objA0.update_address != 0x04e202 && objA0.update_address != 0x04e2f0)
				{
					u8 atex = 0x40 + 5 * 0x20
					u64 key = stringformat("character_slot3_0x%02x", objA0.animation.sprite)
						Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue + 1)
					return true
				}
			}
			
			if (global.characters == CHARS_KNUCKLES_ALONE && useKnucklesAndTails && objA0.update_address == 0x00927a)
			{
				#if GAMEAPP >= 0x22051500
					if (israypartner)
						return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
				#endif
				u8 character = getSecondCharacter()
				u8 atex = (character == CHARACTER_TAILS) ? 0x10 : 0x00
				u64 paletteKey = (character == CHARACTER_SONIC) ? "bluesphere_palette_sonic" : (character == CHARACTER_TAILS) ? "bluesphere_palette_tails" : "bluesphere_palette_knuckles"
				u64 key = stringformat((character == CHARACTER_SONIC) ? "bluesphere_sonic_0x%02x" : (character == CHARACTER_TAILS) ? "bluesphere_tails_0x%02x" : "bluesphere_knuckles_0x%02x", objA0.animation.sprite)
				u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
				if (numColors > 0)
				{
					u32 dest = 0x802180 + character * 0x40
					for (u16 i = 0; i < numColors; ++i)
					{
						u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
					}
				} 
				if (Renderer.hasCustomSprite(key))
				{
					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				else
				{
					if (character == CHARACTER_SONIC)
						key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
					else if (character == CHARACTER_TAILS)
						key = Renderer.setupCustomCharacterSprite(0x28f95a, 0x2908d2, objA0.mapping_offset, objA0.animation.sprite, 0x10)
					else
						key = Renderer.setupCustomCharacterSprite(0x0abf22, 0x0ad31a, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
		}
	}
	
	//actual comp sprites
	if (competition_mode.active && char.character == 5)
	{
		u8 atex = 0x40 + 5 * 0x00
		u64 key
		if (objA0.update_address == 0x0105c4)
		{
			u8 animationSprite = objA0.animation.sprite
			u8 angle

			if (Game.getSetting(SETTING_SMOOTH_ROTATION))
			{
				u8 startingFrame = 0
				u8 frameCount	 = 0

				if (animationSprite >= 0x01 && animationSprite <= 0x0c)
				{
					startingFrame	= 0x01
					frameCount		= 3
				}
				else if (animationSprite >= 0x0d && animationSprite <= 0x14)
				{
					startingFrame	= 0x0d
					frameCount		= 2
				}

				if (startingFrame != 0 && frameCount != 0)
				{
					animationSprite = startingFrame + (animationSprite - startingFrame) % frameCount

					s8 oldRotation = (A0 == 0xffffb000) ? oldRotationPlayer1 : oldRotationPlayer2
					flags = char.flags & char.flag.FACING_LEFT

					angle = char.rotation
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}

				// Store old angle for use next frame
				if (A0 == 0xffffb000)
					oldRotationPlayer1 = angle
				else
					oldRotationPlayer2 = angle
			}
			else
			{
				u8 startingFrame = 0
				u8 frameCount    = 0

				// First state is walking, second state is running
				if (char.state == 0x00 || char.state == 0x01)
				{
					if (animationSprite >= 0x01 && animationSprite <= 0x0c) // Walking sprites
					{
						startingFrame = 0x01
						frameCount    = 3
					}
					else if (animationSprite >= 0x0d && animationSprite <= 0x14) // Running sprites
					{
						startingFrame = 0x0d
						frameCount    = 2
					}
				}

				if ((startingFrame != 0) && (frameCount != 0))
				{
					angle = (animationSprite - startingFrame) / frameCount * 0xe0 * ((char.flags & char.flag.FACING_LEFT) ? -1 : 1)
					animationSprite = startingFrame + (animationSprite - startingFrame) % frameCount
				}
			}

			key = stringformat("comp_character_slot3_0x%02x", animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (char.character == CHARACTER_SONIC) ? 0x337780 : (char.character == CHARACTER_TAILS) ? 0x337780 : 0x337780
				u32 tableAddress  = (char.character == CHARACTER_SONIC) ? 0x29fde4 : (char.character == CHARACTER_TAILS) ? 0x29fde4 : 0x29fde4
				u32 mappingOffset = (char.character == CHARACTER_SONIC) ? 0x29fc3a : (char.character == CHARACTER_TAILS) ? 0x29fc3a : 0x29fc3a

				// Note - mappingOffset isn't necessary as "char.mapping_offset" could be used instead, but this just looks more neat

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}

			if (char.sprite_attributes & 0x8000)
				flags |= SPRITE_FLAG_PRIO

			Renderer.drawCustomSprite(key, px, py, atex, flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue, angle, 0xc0ffffff)
			return true
		}
	}

    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

global u8 FangPalette
function u64 getCharacterPaletteKey(u8 character)
{
	u8 gameMode = global.game_mode & 0x7f
	if (XtraChar == 3 && character == CHARACTER_KNUCKLES && gameMode != 0x4c && gameMode != 0x44 && gameMode != 0x2c && gameMode != 0x30)
	{
		return (FangPalette == 0) ? "slot3palette" : (FangPalette == 1) ? "slot3stt" : (FangPalette == 2) ? "slot3srb2" : "slot3fighters"
	}
	
	return base.getCharacterPaletteKey(character)
}